from http import HTTPStatus

import aiohttp
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          ContextTypes, ConversationHandler, MessageHandler)

from bot.endpoints import (CREATE_NEW_TRACK, DELETE_TRACK_BY_ID,
                           GET_TRACKS_PRICE_HISTORY, USERS_TRACKS,
                           USERS_TRACKS_BY_ID)
from bot.handlers.callback_data import (ADD_TRACK, CHECK_HISTORY, MENU, OZON,
                                        SHOW_ALL_TRACK, WILDBERRIES)
from bot.handlers.constants import MESSAGE_HANDLERS, PARSE_MODE
from bot.handlers.pre_process import load_data_for_register_user
from bot.handlers.utils import (catch_error, check_authorization, get_headers,
                                get_interaction, get_track_keyboard)
from bot.handlers.validators import validate_price

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TARGET_PRICE_REFRESH_TARGET_PRICE = 'refresh_target_price'

ADD_TRACK_ADD_ARTICLE = 'add_article'
ADD_TRACK_ADD_TARGET_PRICE = 'add_target_price'
ADD_TRACK_CREATE_NEW_TRACK = 'create_new_track'

FINISH_DELETE_TRACK = 'delete_track'
CONFIRM_DELETE = 'confirm'
CANCEL_DELETE = 'cancel'


# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è reply_text
SHOW_ALL_ERROR = (
    '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤! ‚ùå\n'
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'
)
EMPTY_TRACKS = (
    '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ üò¢'
)
SHOW_ALL_AUTH_ERROR = (
    '–ü–µ—Ä–µ–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ '
    '/auth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é ‚ö†Ô∏è'
)
TRACK_REFRESH_ERROR = (
    '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞! ‚ùå\n'
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'
)
PRICE_HISTORY_ERROR = (
    '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞! ‚ùå'
)
CREATE_BAD_REQUEST_ERROR = """
{error_message}
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ.
"""
OUTDATED_AUTHORIZATION_ERROR = """
–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é! /auth
–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫ üò¢
"""
SHORT_TRACK_CARD = """
<b>{title}</b> - <code>{article}</code>
_________________________
ID: <b>{id}</b>
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price}</b>
–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: <b>{target_price}</b>
"""
PRICE_HISTORY_CARD = """
–¶–µ–Ω–∞: <b>{price}</b>
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{date} {time}</b>
"""


NEW_TARGET_PRICE_MESSAGE = '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É üè∑Ô∏è'

SELECT_MARKETPLACE_MESSAGE = '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª—ç–π—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ üõçÔ∏è'
SELECT_ARTICLE_MESSAGE = '–£–∫–∞–∂–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ üè∑Ô∏è'
SELECT_TARGET_PRICE_MESSAGE = '–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É üßæ'
SUCCESS_CREATE_TRACK_MESSAGE = '–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω! ‚úÖ'
CREATE_NEW_TRACK_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ‚ö†Ô∏è'
DELETE_TRACK_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö ‚ö†Ô∏è'

TRACK_CARD = """
<b>{title}</b> - <code>{article}</code>
_________________________
üí∏ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price}</b>
üéØ –ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: <b>{target_price}</b>
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{created_at}</b>
–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{last_checked_at}</b>
"""


@catch_error(SHOW_ALL_ERROR)
@load_data_for_register_user
async def show_all(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()
    if not await check_authorization(query, context):
        return
    async with aiohttp.ClientSession() as session:
        async with session.get(
            USERS_TRACKS,
            headers=get_headers(context)
        ) as response:
            if response.status == HTTPStatus.UNAUTHORIZED:
                await query.message.reply_text(
                    OUTDATED_AUTHORIZATION_ERROR
                )
                return
            main_buttons = [
                [
                    InlineKeyboardButton(
                        '–û—Ç—Å–ª–µ–¥–∏—Ç—å —Ç–æ–≤–∞—Ä üîç',
                        callback_data=ADD_TRACK
                    )
                ],
                [
                    InlineKeyboardButton(
                        '–ú–µ–Ω—é üõçÔ∏è',
                        callback_data=MENU
                    )
                ]
            ]
            tracks = await response.json()
            if not tracks:
                await query.message.reply_text(
                    EMPTY_TRACKS,
                    reply_markup=InlineKeyboardMarkup(main_buttons)
                )
                return
            for track in tracks:
                await query.message.reply_text(
                    text=SHORT_TRACK_CARD.format(
                        title=track.get('title'),
                        id=track.get('id'),
                        article=track.get('article'),
                        current_price=track.get('current_price'),
                        target_price=track.get('target_price')
                    ),
                    parse_mode=PARSE_MODE,
                    reply_markup=InlineKeyboardMarkup(
                        get_track_keyboard(track["id"])
                    )
                )
            await query.message.reply_text(
                '–ù–∞–≤–∏–≥–∞—Ü–∏—è üí¨',
                reply_markup=InlineKeyboardMarkup(main_buttons)
            )


async def get_new_target_price(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()
    context.user_data['track_id'] = query.data.split('_')[-1]
    if not await check_authorization(query, context):
        return ConversationHandler.END
    await query.message.reply_text(NEW_TARGET_PRICE_MESSAGE)
    return 'save_new_target_price'


@catch_error(TRACK_REFRESH_ERROR, conv=True)
@load_data_for_register_user
async def target_price_refresh(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    get_new_target_price = update.message.text
    validated_price = await validate_price(
        update, context, get_new_target_price
    )
    if not validated_price:
        return 'refresh_target_price'
    async with aiohttp.ClientSession() as session:
        refresh_data = dict(
            target_price=validated_price
        )
        async with session.patch(
            USERS_TRACKS_BY_ID.format(id=context.user_data['track_id']),
            headers=get_headers(context),
            json=refresh_data
        ):
            buttons = [
                [
                    InlineKeyboardButton(
                        '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è',
                        callback_data=f'{SHOW_ALL_TRACK}'
                    )
                ]
            ]
            await update.message.reply_text(
                '–¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! ‚úÖ',
                reply_markup=InlineKeyboardMarkup(buttons)
            )
            return ConversationHandler.END


async def select_marketplace(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    context.user_data['new_track'] = dict()
    interaction = await get_interaction(update)
    buttons = [
        [
            InlineKeyboardButton(
                'WB üü£',
                callback_data=f'track_{WILDBERRIES}'
            ),
            InlineKeyboardButton(
                'OZON (WB)üîµ',
                callback_data=f'track_{WILDBERRIES}'
            )
        ]
    ]
    await interaction.message.reply_text(
        SELECT_MARKETPLACE_MESSAGE,
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return ADD_TRACK_ADD_ARTICLE


async def add_article(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()
    context.user_data['new_track']['marketplace'] = query.data.split('_')[-1]
    await query.message.reply_text(
        SELECT_ARTICLE_MESSAGE
    )
    return ADD_TRACK_ADD_TARGET_PRICE


async def add_target_price(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    context.user_data['new_track']['article'] = update.message.text
    await update.message.reply_text(
        SELECT_TARGET_PRICE_MESSAGE
    )
    return ADD_TRACK_CREATE_NEW_TRACK


@catch_error(CREATE_NEW_TRACK_ERROR, conv=True)
@load_data_for_register_user
async def create_new_track(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    context.user_data['new_track']['target_price'] = update.message.text
    async with aiohttp.ClientSession() as session:
        async with session.post(
            CREATE_NEW_TRACK,
            headers=get_headers(context),
            json=context.user_data['new_track']
        ) as response:
            if response.status == HTTPStatus.UNAUTHORIZED:
                await update.message.reply_text(
                    OUTDATED_AUTHORIZATION_ERROR
                )
                return ConversationHandler.END
            elif response.status == HTTPStatus.BAD_REQUEST:
                error_data = await response.json()
                await update.message.reply_text(
                    CREATE_BAD_REQUEST_ERROR.format(
                        error_message=error_data.get('detail')
                    )
                )
                await select_marketplace(update, context)
                return ADD_TRACK_ADD_ARTICLE
            new_track = await response.json()
            await update.message.reply_text(SUCCESS_CREATE_TRACK_MESSAGE)
            await update.message.reply_text(
                text=TRACK_CARD.format(
                    title=new_track['title'],
                    article=new_track['article'],
                    current_price=new_track['current_price'],
                    target_price=new_track['target_price'],
                    created_at=new_track['created_at'],
                    last_checked_at=new_track['last_checked_at']
                ),
                parse_mode=PARSE_MODE,
                reply_markup=InlineKeyboardMarkup(
                    get_track_keyboard(new_track["id"])
                )
            )
            return ConversationHandler.END


@catch_error(PRICE_HISTORY_ERROR)
@load_data_for_register_user
async def check_track_history(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞."""
    query = update.callback_query
    await query.answer()
    track_id = query.data.split('_')[-1]
    async with aiohttp.ClientSession() as session:
        async with session.get(
            GET_TRACKS_PRICE_HISTORY.format(
                track_id=track_id
            ),
            headers=get_headers(context)
        ) as response:
            writes = await response.json()
            navigate_buttons = [
                [
                    InlineKeyboardButton(
                        '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ ‚¨ÖÔ∏è',
                        callback_data=f'{SHOW_ALL_TRACK}'
                    )
                ]
            ]
            if not writes:
                await query.message.reply_text(
                    '–ò—Å—Ç–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ –ø—É—Å—Ç–∞(',
                    reply_markup=InlineKeyboardMarkup(navigate_buttons)
                )
                return
            await query.message.reply_text(
                f'–ò—Å—Ç–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ {track_id}'
            )
            for write in writes:
                date, time = write['created_at'].split('T')
                await query.message.reply_text(
                    text=PRICE_HISTORY_CARD.format(
                        price=write['price'],
                        date=date,
                        time=time
                    ),
                    parse_mode=PARSE_MODE
                )
            await query.message.reply_text(
                '–ù–∞–≤–∏–≥–∞—Ü–∏—è üìã',
                reply_markup=InlineKeyboardMarkup(navigate_buttons)
            )


async def confirm_track_delete(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()
    track_id = query.data.split('_')[-1]
    context.user_data['deleted_track'] = dict()
    context.user_data['deleted_track']['id'] = track_id
    buttons = [
        [
            InlineKeyboardButton(
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üñ±Ô∏è',
                callback_data=CONFIRM_DELETE
            ),
            InlineKeyboardButton(
                '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è',
                callback_data=CANCEL_DELETE
            )
        ]
    ]
    await query.message.reply_text(
        f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å id = {track_id}',
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return FINISH_DELETE_TRACK

@catch_error(DELETE_TRACK_ERROR, conv=True)
@load_data_for_register_user
async def finish_delete_track(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()
    buttons = [
        [
            InlineKeyboardButton(
                '–ö —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ ‚¨ÖÔ∏è',
                callback_data=SHOW_ALL_TRACK
            )
        ]
    ]
    if query.data == CANCEL_DELETE:
        await query.message.reply_text(
            f'–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å id = '
            f'{context.user_data["deleted_track"]["id"]} –æ—Ç–º–µ–Ω–µ–Ω–æ!',
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return ConversationHandler.END
    async with aiohttp.ClientSession() as session:
        async with session.delete(
            DELETE_TRACK_BY_ID.format(
                id=context.user_data['deleted_track']['id']
            )
        ):
            await query.message.reply_text(
                f'–¢–æ–≤–∞—Ä —Å id = {context.user_data["deleted_track"]["id"]} '
                f'—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! ‚úÖ',
                reply_markup=InlineKeyboardMarkup(buttons)
            )
    return ConversationHandler.END


def handlers_installer(
    application: ApplicationBuilder
) -> None:
    application.add_handler(
        CallbackQueryHandler(
            show_all, pattern=f'^{SHOW_ALL_TRACK}$'
        )
    )
    application.add_handler(
        CallbackQueryHandler(
            check_track_history, pattern=f'^{CHECK_HISTORY}_'
        )
    )
    refresh_target_price_conversation_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                get_new_target_price, pattern='^track_refresh_target_price_'
            )
        ],
        states={
            'save_new_target_price': [
                MessageHandler(MESSAGE_HANDLERS, target_price_refresh)
            ]
        },
        fallbacks=[
            MessageHandler(MESSAGE_HANDLERS, target_price_refresh)
        ]
    )
    add_track_conversation_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                select_marketplace, pattern=f'^{ADD_TRACK}$'
            )
        ],
        states={
            ADD_TRACK_ADD_ARTICLE: [
                CallbackQueryHandler(
                    add_article, pattern=f'^track_({WILDBERRIES}|{OZON})$'
                )
            ],
            ADD_TRACK_ADD_TARGET_PRICE: [
                MessageHandler(
                    MESSAGE_HANDLERS, add_target_price
                )
            ],
            ADD_TRACK_CREATE_NEW_TRACK: [
                MessageHandler(MESSAGE_HANDLERS, create_new_track)
            ]
        },
        fallbacks=[
            MessageHandler(MESSAGE_HANDLERS, create_new_track)
        ]
    )
    delete_track_conversation_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                confirm_track_delete, pattern='^track_delete_'
            )
        ],
        states={
            FINISH_DELETE_TRACK: [
                CallbackQueryHandler(
                    finish_delete_track,
                    pattern=f'^({CONFIRM_DELETE}|{CANCEL_DELETE})$'
                )
            ]
        },
        fallbacks=[
            CallbackQueryHandler(
                finish_delete_track,
                pattern=f'^({CONFIRM_DELETE}|{CANCEL_DELETE})$'
            )
        ]
    )
    application.add_handler(
        refresh_target_price_conversation_handler
    )
    application.add_handler(
        add_track_conversation_handler
    )
    application.add_handler(
        delete_track_conversation_handler
    )
