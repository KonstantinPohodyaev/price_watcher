from http import HTTPStatus

import aiohttp
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          CommandHandler, ContextTypes, ConversationHandler,
                          MessageHandler, filters)

from bot.endpoints import (GET_JWT_TOKEN, GET_USER_BY_TELEGRAM_ID,
                           REGISTER_USER, USERS_ENDPOINT)
from bot.handlers.pre_process import load_data_for_register_user
from bot.handlers.utils import check_password, load_user_data
from bot.handlers.validators import validate_full_name

MESSAGE_HANDLERS = filters.TEXT & ~filters.COMMAND

INFO = """
–ü—Ä–æ–µ–∫—Ç Price Watcher
_______________
–∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–∞—Å —Ç–æ–≤–∞—Ä–∞–º
–Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è,
–µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –¥–æ –∂–µ–ª–∞–µ–º–æ–π!
/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/account_info - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
"""

ACCOUNT_INFO = """
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
__________________
/delete_account - —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/account_data - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
"""


@load_data_for_register_user
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if context.user_data['account']:
            await update.message.reply_text(
                text=(
                    f'–ü—Ä–∏–≤–µ—Ç, {context.user_data["account"]["name"]}\\! '
                    f'–ß–µ–º —è —Ç–µ–±–µ –º–æ–≥—É –ø–æ–º–æ—á—å\\? üëã\n'
                    f'/info \\- –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
                    f'/auth \\- –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\n'
                ),
                parse_mode='MarkdownV2'
            )
        else:
            button = InlineKeyboardButton(
                '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é',
                callback_data='start_registration'
            )
            keyboard = InlineKeyboardMarkup([[button]])
            await update.message.reply_text(
                '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!',
                reply_markup=keyboard
            )
    except Exception as error:
        await update.message.reply_text(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏! ‚ùå'
        )
        print(str(error))

async def info(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await update.message.reply_text(
        INFO
    )


async def account_info(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await update.message.reply_text(
        ACCOUNT_INFO
    )


async def check_account_data(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await update.message.reply_text(
        text=f'```{context.user_data["account"]}```',
        parse_mode='MarkdownV2'
    )


async def start_registration(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    context.user_data['account'] = dict()
    await query.message.reply_text(
        '–£–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: '
    )
    return 'name_and_surname'


async def select_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not validate_full_name(update.message.text):
        await update.message.reply_text(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ üö´\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
        )
        return 'name_and_surname'
    name, surname = update.message.text.split()
    context.user_data['account']['name'] = name
    context.user_data['account']['surname'] = surname
    await update.message.reply_text(
        '–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É –ø–æ—á—Ç—É: '
    )
    return 'email'


async def select_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['account']['email'] = update.message.text
    await update.message.reply_text(
        '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å: '
    )
    return 'password'


async def select_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['account']['password'] = update.message.text
    context.user_data['account']['telegram_id'] = update.message.from_user.id
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                REGISTER_USER, json=context.user_data['account']
            ) as response:
                if response.status == HTTPStatus.CREATED:
                    user = await response.json()
                    await update.message.reply_text(
                        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞!'
                    )
                    buttons = [
                        [
                            InlineKeyboardButton(
                                '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', callback_data='authorization'
                            )
                        ]
                    ]
                    await update.message.reply_text(
                        text=(
                            f'–ü—Ä–∏–≤–µ—Ç, {user["name"]}! '
                            f'–í–æ—Ç —Ç–≤–æ–π id: {user["id"]}'
                        ),
                        reply_markup=InlineKeyboardMarkup(buttons)
                    )
                else:
                    detail = await response.json()
                    await update.message.reply_text(detail)
    except Exception as error:
        await update.message.reply_text(
            '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è('
        )
        print(str(error))
    return ConversationHandler.END


async def get_password_for_authorization(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        config = query
    else:
        config = update
    await config.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:'
    )
    return 'authorization'


async def authorization(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    if not context.user_data.get('account'):
        context.user_data['account'] = dict()
    context.user_data['account']['password'] = update.message.text
    try:
        async with aiohttp.ClientSession() as session:
            await load_user_data(
                session, update, context
            )
            if not check_password(
                context.user_data['account']['password'],
                context.user_data['account']['hashed_password']
            ):
                await update.message.reply_text(
                    '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å üö´\n'
                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                )
                return 'authorization'
            if context.user_data['account'].get('jwt_token'):
                print(context.user_data['account'].get('jwt_token'))
                await update.message.reply_text(
                    '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞!'
                )
                return ConversationHandler.END
            else:
                request_body = dict(
                    grant_type='password',
                    username=context.user_data['account']['email'],
                    password=context.user_data['account']['password'],
                    scope=''
                )
                async with session.post(
                    GET_JWT_TOKEN, data=request_body
                ) as response:
                    data = await response.json()
                    context.user_data['account']['jwt_token'] = (
                        data['access_token']
                    )
                    await update.message.reply_text(
                        '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ'
                    )
                    return ConversationHandler.END
    except Exception as error:
        await update.message.reply_text(
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ JWT-—Ç–æ–∫–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.'
        )
        print(str(error))
        return ConversationHandler.END


async def get_password_for_delete_account(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:'
    )
    return 'start_delete'


async def delete_account(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    if not context.user_data.get('account'):
        context.user_data['account'] = dict()
    context.user_data['account']['password'] = update.message.text
    try:
        async with aiohttp.ClientSession() as session:
            await load_user_data(session, update, context)
            if not check_password(
                context.user_data['account']['password'],
                context.user_data['account']['hashed_password']
            ):
                await update.message.reply_text(
                    '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å üö´\n'
                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                )
                return 'delete_account'
            if not context.user_data['account'].get('jwt_token'):
                await update.message.reply_text(
                    '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
                )
                return ConversationHandler.END
            async with session.delete(
                USERS_ENDPOINT + f'/{context.user_data["account"]["id"]}',
                headers=dict(
                    Authorization=(
                        f'Bearer {context.user_data["account"]["jwt_token"]}'
                    )
                )
            ):
                await update.message.reply_text(
                    '–í–∞—à –∞–∫–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω!'
                    '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ - /start'
                )
                return ConversationHandler.END
    except Exception as error:
        await update.message.reply_text(
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.'
        )
        print(str(error))


def handlers_installer(
    application: ApplicationBuilder
) -> None:
    application.add_handler(
        CommandHandler('start', start)
    )
    application.add_handler(
        CommandHandler('info', info)
    )
    application.add_handler(
        CommandHandler('account_info', account_info)
    )
    application.add_handler(
        CommandHandler('account_data', check_account_data)
    )
    registration_conversation_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                start_registration, pattern='^start_registration$'
            )
        ],
        states={
            'name_and_surname': [
                MessageHandler(MESSAGE_HANDLERS, select_name)
            ],
            'email': [
                MessageHandler(MESSAGE_HANDLERS, select_email)
            ]
        },
        fallbacks=[
            MessageHandler(MESSAGE_HANDLERS, select_password)
        ]
    )
    authorization_conversation_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                get_password_for_authorization, pattern='^authorization$'
            ),
            CommandHandler(
                'auth', get_password_for_authorization
            ),
        ],
        states={
            'authorization': [
                MessageHandler(MESSAGE_HANDLERS, authorization)
            ],
            'get_password': [
                MessageHandler(MESSAGE_HANDLERS, get_password_for_authorization)
            ]
        },
        fallbacks=[
            MessageHandler(MESSAGE_HANDLERS, authorization)
        ]
    )
    delete_acoount_conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler(
                'delete_account', get_password_for_delete_account
            )
        ],
        states={
            'start_delete': [
                MessageHandler(MESSAGE_HANDLERS, delete_account)
            ]
        },
        fallbacks=[
            MessageHandler(MESSAGE_HANDLERS, delete_account)
        ]
    )
    application.add_handler(
        registration_conversation_handler
    )
    application.add_handler(
        authorization_conversation_handler
    )
    application.add_handler(
        delete_acoount_conversation_handler
    )
