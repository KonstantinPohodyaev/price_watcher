from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      ReplyKeyboardMarkup, Update)
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          CommandHandler, ContextTypes, filters)

from bot.handlers.callback_data import (ADD_TRACK, MENU, SHOW_ALL_TRACK,
                                        START_REGISTRATION)
from bot.handlers.constants import PARSE_MODE
from bot.handlers.pre_process import load_data_for_register_user
from bot.handlers.utils import catch_error

MESSAGE_HANDLERS = filters.TEXT & ~filters.COMMAND

START_ERROR = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞! ‚ùå'

INFO = """
<u>–ü—Ä–æ–µ–∫—Ç Price Watcher</u>
_____________________________
–∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–∞—Å —Ç–æ–≤–∞—Ä–∞–º
–Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è,
–µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –¥–æ –∂–µ–ª–∞–µ–º–æ–π!
/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/auth - –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
/account_info - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
"""

START_MESSAGE = """
<b>–ü—Ä–∏–≤–µ—Ç</b>, <code>{name}</code>!
–ß–µ–º —è —Ç–µ–±–µ –º–æ–≥—É –ø–æ–º–æ—á—å? üëã
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
"""

MAIN_REPLY_BUTTONS = ['–°—Ç–∞—Ä—Ç üî•', '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üîê', '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç üì±']


@load_data_for_register_user
@catch_error(START_ERROR)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    main_keyboard = ReplyKeyboardMarkup(
        [MAIN_REPLY_BUTTONS],
        resize_keyboard=True
    )
    if context.user_data.get('account'):
        if context.user_data['account'].get('jwt_token'):
            buttons = [
                [
                    InlineKeyboardButton(
                        '–ú–µ–Ω—é üì¶', callback_data=MENU
                    )
                ]
            ]
        await update.message.reply_text(
            '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...',
            reply_markup=main_keyboard
        )
        await update.message.reply_text(
            text=START_MESSAGE.format(
                name=update.message.from_user.username
            ),
            parse_mode=PARSE_MODE,
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        buttons = [
            [
                InlineKeyboardButton(
                    '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üî•',
                    callback_data=START_REGISTRATION
                )
            ]
        ]
        await update.message.reply_text(
            '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üö®',
            reply_markup=InlineKeyboardMarkup(buttons)
        )


async def info(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await update.message.reply_text(
        text=INFO,
        parse_mode=PARSE_MODE
    )


async def menu(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()
    buttons = [
        [
            InlineKeyboardButton(
                '–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã üì¶',
                callback_data=SHOW_ALL_TRACK
            )
        ],
        [
            InlineKeyboardButton(
                '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä üì¶',
                callback_data=ADD_TRACK
            )
        ],
        
    ]
    await query.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç',
        reply_markup=InlineKeyboardMarkup(buttons)
    )


def handlers_installer(
    application: ApplicationBuilder
) -> None:
    application.add_handler(
        CommandHandler('start', start)
    )
    application.add_handler(
        CommandHandler('info', info)
    )
    application.add_handler(
        CallbackQueryHandler(menu, pattern=f'^{MENU}$')
    )
