from http import HTTPStatus

import aiohttp
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          CommandHandler, ContextTypes, ConversationHandler,
                          MessageHandler, filters)

from bot.endpoints import (GET_JWT_TOKEN, GET_USER_BY_TELEGRAM_ID,
                           REGISTER_USER, USERS_ENDPOINT)
from bot.handlers.pre_process import load_data_for_register_user
from bot.handlers.utils import check_password
from bot.handlers.validators import (
    validate_full_name, validate_email, validate_password
)
from bot.handlers.constants import PARSE_MODE

MESSAGE_HANDLERS = filters.TEXT & ~filters.COMMAND

INFO = """
<u>–ü—Ä–æ–µ–∫—Ç Price Watcher</u>
_____________________________
–∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–∞—Å —Ç–æ–≤–∞—Ä–∞–º
–Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è,
–µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –¥–æ –∂–µ–ª–∞–µ–º–æ–π!
/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/account_info - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
"""

START_MESSAGE = (
    '<b>–ü—Ä–∏–≤–µ—Ç</b>, <code>{name}</code>! '
    '–ß–µ–º —è —Ç–µ–±–µ –º–æ–≥—É –ø–æ–º–æ—á—å? üëã\n'
    '/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
    '/auth - –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\n'
)


@load_data_for_register_user
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if context.user_data.get('account'):
            keyboard = None
            if context.user_data['account'].get('jwt_token'):
                buttons = [
                    [
                        InlineKeyboardButton(
                            '–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã üì¶', callback_data='track_show_all'
                        )
                    ]
                ]
                keyboard = InlineKeyboardMarkup(buttons)
            await update.message.reply_text(
                text=START_MESSAGE.format(
                    name=update.message.from_user.username
                ),
                parse_mode=PARSE_MODE,
                reply_markup=keyboard
            )
        else:
            button = InlineKeyboardButton(
                '–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üî•',
                callback_data='start_registration'
            )
            keyboard = InlineKeyboardMarkup([[button]])
            await update.message.reply_text(
                '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! üö®',
                reply_markup=keyboard
            )
    except Exception as error:
        await update.message.reply_text(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞! ‚ùå'
        )
        print(str(error))

async def info(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await update.message.reply_text(
        text=INFO,
        parse_mode=PARSE_MODE
    )


def handlers_installer(
    application: ApplicationBuilder
) -> None:
    application.add_handler(
        CommandHandler('start', start)
    )
    application.add_handler(
        CommandHandler('info', info)
    )
