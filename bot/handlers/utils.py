import re

from aiohttp import ClientSession
from argon2 import PasswordHasher
from argon2.exceptions import VerifyMismatchError
from telegram import CallbackQuery, Message, Update
from telegram.ext import ContextTypes

from bot.endpoints import GET_USER_BY_TELEGRAM_ID

password_hasher = PasswordHasher()


def catch_error(error_message: str):
    def decorator(handler):
        async def wrapper(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE,
            *args, **kwargs
        ):
            try:
                return await handler(update, context, *args, **kwargs)
            except Exception as error:
                interaction = await get_interaction(update)
                await interaction.message.reply_text(error_message)
                print(str(error))
        return wrapper
    return decorator


async def check_password(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    entered_password: str,
    hashed_user_password: str
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å –ë–î."""
    try:
        password_hasher.verify(
            hashed_user_password, entered_password
        )
        return True
    except VerifyMismatchError:
        await update.message.reply_text(
            '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å üö´\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        )
        return False


async def check_authorization(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–∞–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    if not context.user_data['account'].get('jwt_token'):
        await update.message.reply_text(
            '–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚ö†Ô∏è'
        )
        return False
    return True


async def load_user_data(
    session: ClientSession,
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
):
    async with session.post(
            GET_USER_BY_TELEGRAM_ID, json=dict(
            telegram_id=update.message.from_user.id
        )
    ) as response:
        user_data = await response.json()
        if user_data:
            for field, value in user_data.items():
                context.user_data['account'][field] = value


def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ Telegram.
    """
    return re.sub(r'([\\_*[\]()~`>#+\-=|{}.!])', r'\\\1', text)


async def get_interaction(update: Update) -> Update | CallbackQuery:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    interaction = update or update.callback_data
    if isinstance(interaction, CallbackQuery):
        await interaction.answer()
    return interaction
