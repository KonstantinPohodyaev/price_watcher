import os
import re

from aiohttp import ClientSession
from argon2 import PasswordHasher
from argon2.exceptions import VerifyMismatchError
from cryptography.fernet import Fernet
from telegram import (CallbackQuery, InlineKeyboardButton,
                      InlineKeyboardMarkup, Update)
from telegram.ext import ContextTypes, ConversationHandler

from bot.endpoints import GET_USER_BY_TELEGRAM_ID
from bot.handlers.callback_data import CHECK_HISTORY

password_hasher = PasswordHasher()

fernet = Fernet(
    os.getenv(
        'JWT_SECRET_KEY',
        'A8zOVVp4FMb93RD03n0O25FwAYmTxmTQhF3kPBnLJ6E='
    )
)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã.
def catch_error(error_message: str, conv=False):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ö–∞–Ω–¥–ª–µ—Ä–∞–º try-except –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é."""
    def decorator(handler):
        async def wrapper(
            update: Update,
            context: ContextTypes.DEFAULT_TYPE,
            *args, **kwargs
        ):
            try:
                return await handler(update, context, *args, **kwargs)
            except Exception as error:
                interaction = await get_interaction(update)
                await interaction.message.reply_text(error_message)
                print(str(error))
                if conv:
                    return ConversationHandler.END
        return wrapper
    return decorator


def get_telegram_id(interaction: Update | CallbackQuery):
    """–ù–∞—Ö–æ–¥–∏—Ç —Ç–µ–ª–µ–≥—Ä–∞–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if isinstance(interaction, Update):
        return interaction.message.from_user.id
    return interaction.from_user.id


def add_message_to_delete_list(message, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ."""
    if not context.user_data.get('last_message_ids'):
        context.user_data['last_message_ids'] = list()
    context.user_data['last_message_ids'].append(message.message_id)


async def check_password(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    entered_password: str,
    hashed_user_password: str
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å —Å –ë–î."""
    try:
        password_hasher.verify(
            hashed_user_password, entered_password
        )
        return True
    except VerifyMismatchError:
        await update.message.reply_text(
            '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å üö´\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        )
        return False


async def check_authorization(
    interaction: Update | CallbackQuery,
    context: ContextTypes.DEFAULT_TYPE,
):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–∞–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    if not context.user_data.get('account', {}).get('jwt_token'):
        await interaction.message.reply_text(
            '–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è /auth ‚ö†Ô∏è'
        )
        return False
    return True


async def load_user_data(
    session: ClientSession,
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)."""
    async with session.post(
            GET_USER_BY_TELEGRAM_ID, json=dict(
            telegram_id=update.message.from_user.id
        )
    ) as response:
        user_data = await response.json()
        if user_data:
            for field, value in user_data.items():
                context.user_data['account'][field] = value


def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ Telegram.
    """
    return re.sub(r'([\\_*[\]()~`>#+\-=|{}.!])', r'\\\1', text)


async def get_interaction(update: Update) -> Update | CallbackQuery:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        return query
    elif update.message:
        return update


def get_headers(
    context: ContextTypes.DEFAULT_TYPE
) -> dict[str, str]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    return dict(
        Authorization=(
            f'Bearer {context.user_data["account"]["jwt_token"]}'
        )
    )


def decode_jwt_token(encoded_jwt_token):
    decoded_jwt_token = fernet.decrypt(encoded_jwt_token.encode())
    return decoded_jwt_token.decode()


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏.
def get_track_keyboard(track_id: int) -> list[InlineKeyboardButton]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Track."""
    return [
        [
            InlineKeyboardButton(
                '–ò–∑–º–µ–Ω–∏—Ç—å ‚ö°',
                callback_data=f'track_refresh_target_price_{track_id}'
            ),
            InlineKeyboardButton(
                '–£–¥–∞–ª–∏—Ç—å ‚ùå',
                callback_data=f'track_delete_{track_id}'
            )
        ],
        [
            InlineKeyboardButton(
                '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é üõçÔ∏è',
                callback_data=f'{CHECK_HISTORY}_{track_id}'
            )
        ]
    ]
