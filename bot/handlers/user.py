from http import HTTPStatus

import aiohttp
from telegram import InlineKeyboardMarkup, InputFile, Update
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          CommandHandler, ContextTypes, ConversationHandler,
                          MessageHandler)

from bot.endpoints import (ADD_NEW_AVATAR, DELETE_USER_BY_ID, GET_JWT_TOKEN,
                           REGISTER_USER, USERS_REFRESH_ME)
from bot.handlers.buttons import (ACCOUNT_SETTINGS_BUTTONS,
                                  CHECK_ACCOUNT_DATA_BUTTONS, EDIT_BUTTONS,
                                  FINISH_AUTHORIZATION_BUTTONS,
                                  FINISH_EDIT_BUTTONS,
                                  FINISH_REGISTRATION_BUTTONS,
                                  LOAD_ACCOUNT_DATA)
from bot.handlers.callback_data import (ACCOUNT_SETTINGS, EDIT_ADD_AVATAR,
                                        EDIT_EMAIL_CALLBACK,
                                        EDIT_FULL_NAME_CALLBACK, EDIT_PASSWORD)
from bot.handlers.constants import MESSAGE_HANDLERS, PHOTO_HANDLERS
from bot.handlers.pre_process import (clear_messages,
                                      load_data_for_register_user)
from bot.handlers.utils import (catch_error, check_authorization,
                                check_password, get_headers, get_interaction,
                                send_tracked_message, send_tracked_photo)
from bot.handlers.validators import (PASSWORD_MAX_LENGTH, PASSWORD_MIN_LENGTH,
                                     validate_email, validate_empty_photo,
                                     validate_full_name, validate_password)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler

REGISTRATION_FULL_NAME = 'full_name'
REGISTRATION_EMAIL = 'email'
REGISTRATION_PASSWORD = 'password'

AUTH_AUTHORIZATION = 'auth'
AUTH_GET_PASSWORD = 'get_password'

DELETE_START_DELETE = 'start_delete'

EDIT_CHOOSE_EDIT_FIELD = 'choose_edit_field'
EDIT_START_EDIT_FIELD = 'start_edit_field'
EDIT_SAVE_EDIT_FULL_NAME = 'save_edit_full_name'
EDIT_SAVE_EDIT_EMAIL = 'save_edit_email'
EDIT_SAVE_EDIT_PASSWORD = 'save_edit_password'
EDIT_SAVE_AVATAR = 'save_avatar'
EDIT_FINISH_EDIT = 'finish_edit'

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è reply_text

ACCOUNT_SETTINGS_MESSAGE = """
<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîÑ <b>/load_data</b> ‚Äì –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
‚úèÔ∏è <b>/edit_account</b> ‚Äì —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
üóëÔ∏è <b>/delete_account</b> ‚Äì —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
üë§ <b>/account_data</b> ‚Äì –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
"""

ACCOUNT_DATA_MESSAGE = """
<b>üë§ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞</b>
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
<b>–ò–º—è:</b> {name}
<b>–§–∞–º–∏–ª–∏—è:</b> {surname}
<b>–ü–æ—á—Ç–∞:</b> {email}
<b>Telegram ID:</b> <code>{telegram_id}</code>
<b>Chat ID:</b> <code>{chat_id}</code>

<b>–ê–∫—Ç–∏–≤–µ–Ω:</b> {active}
<b>–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:</b> {is_verified}
<b>–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {is_superuser}

<b>JWT-—Ç–æ–∫–µ–Ω:</b>
<code>{jwt_token}</code>
"""

ACCOUNT_DATA_NAVIGATION_MESSAGE = """
üìç <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è</b>
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚¨ÖÔ∏è –ù–∞–∑–∞–¥ | üè† –ú–µ–Ω—é
"""

USER_CARD = """
üë§ <b>–ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {name} {surname}
üìß <b>–ü–æ—á—Ç–∞:</b> <code>{email}</code>
üÜî <b>Telegram ID:</b> <code>{telegram_id}</code>
üîê <b>JWT:</b> <code>{jwt_token}</code>
"""

LOAD_ACCOUNT_DATA_MESSAGE = '–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! ‚úÖ'

ASK_FULL_NAME = """
üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é</b> —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:
–ü—Ä–∏–º–µ—Ä: <code>–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤</code>
"""

ASK_EMAIL = """
üìß –í–≤–µ–¥–∏—Ç–µ <b>–≤–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É</b>:
–ü—Ä–∏–º–µ—Ä: <code>example@mail.ru</code>
"""

ASK_PASSWORD = """
üîí –ü—Ä–∏–¥—É–º–∞–π—Ç–µ <b>–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>:
<i>–û—Ç {min} –¥–æ {max} —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ü–∏—Ñ—Ä</i>
"""

REGISTRATION_SUCCESS = """
‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>
–î–∞–≤–∞–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üëá
"""

REGISTRATION_GREETING_TEMPLATE = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{name}</b>!
üÜî –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: <code>{user_id}</code>
–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è
"""

ENTER_PASSWORD_MESSAGE = '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:'

NO_ACCOUNT_LOADED = """
‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π: <code>/load_data</code>
"""

# –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
ASK_PASSWORD_AUTH = """
üîë –í–≤–µ–¥–∏—Ç–µ <b>–≤–∞—à –ø–∞—Ä–æ–ª—å</b> –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
"""

INVALID_PASSWORD = """
‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:
"""

AUTH_SUCCESS = """
‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá
"""

# –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
ASK_PASSWORD_FOR_DELETE = """
üîê <b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</b> –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è:
"""

INVALID_PASSWORD_DELETE = """
‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:
"""

DELETE_SUCCESS = """
üóëÔ∏è <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!</b>

–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ ‚Äî /start
"""

# –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
START_EDIT_PASSWORD_PROMPT = """
üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:
"""

CHOOSE_EDIT_FIELD_PROMPT = """
üõ†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚è≥
–ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å!
"""

EDIT_FULL_NAME_PROMPT = """
‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:
"""

EDIT_EMAIL_PROMPT = """
üìß –í–≤–µ–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø–æ—á—Ç—É:
"""

EDIT_PASSWORD_PROMPT = """
üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:
"""

EDIT_AVATAR_PROMPT = """
üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:
"""

FULL_NAME_SAVED_MESSAGE = """
‚úÖ –ù–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
"""

EMAIL_SAVED_MESSAGE = """
‚úÖ –ù–æ–≤–∞—è –ø–æ—á—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!
"""

PASSWORD_SAVED_MESSAGE = """
‚úÖ –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!
"""

AVATAR_SAVED_MESSAGE = """
‚úÖ –ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!
"""

TOKEN_EXPIRED_MESSAGE = """
‚ö†Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ç–µ–∫(
üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é! /auth
"""

AVATAR_UPLOAD_ERROR_MESSAGE = """
‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {error}
üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É!
"""

DATA_UPDATED_MESSAGE = """
‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã

{new_user_data}
"""

NOT_AUTHORIZED_DELETE = """
üö´ <b>–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.
"""

REGISTRATION_ERROR = (
    '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üö´'
)
AUTHORIZATION_ERROR = (
    '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ JWT-—Ç–æ–∫–µ–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é! üö´'
)
AUTHORIZATION_SAVE_TOKEN_ERROR = """
üö´ <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞</b> –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.
"""
DELETE_ACCOUNT_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞! üö´'
SELECT_EDIT_FIELD_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! üö´'
START_EDIT_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏! üö´'
SAVE_FULL_NAME_ERROR = (
    '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –≤ –ë–î üö´'
)
SAVE_EMAIL_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –ø–æ—á—Ç—ã –≤ –ë–î üö´'
SAVE_PASSWORD_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –≤ –ë–î üö´'
EDIT_FINISH_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞ üö´'
SAVE_AVATAR_ERROR = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ üö´'


@clear_messages
@load_data_for_register_user
async def account_settings(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await send_tracked_message(
        await get_interaction(update),
        context,
        text=ACCOUNT_SETTINGS_MESSAGE,
        reply_markup=InlineKeyboardMarkup(ACCOUNT_SETTINGS_BUTTONS)
    )


@clear_messages
@load_data_for_register_user
async def load_account_data(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await update.message.delete()
    await send_tracked_message(
        update,
        context,
        text=LOAD_ACCOUNT_DATA_MESSAGE,
        reply_markup=InlineKeyboardMarkup(LOAD_ACCOUNT_DATA)
    )


@clear_messages
@load_data_for_register_user
async def check_account_data(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await update.message.delete()
    account = context.user_data['account']
    user_data = ACCOUNT_DATA_MESSAGE.format(
        name=account['name'],
        surname=account['surname'],
        email=account['email'],
        telegram_id=account['telegram_id'],
        chat_id=account['chat_id'],
        active='‚úÖ' if account['is_active'] else '‚ùå',
        is_verified='‚úÖ' if account['is_verified'] else '‚ùå',
        is_superuser='‚úÖ' if account['is_superuser'] else '‚ùå',
        jwt_token=account['jwt_token'] if account.get('jwt_token') else '‚ùå'
    )
    if user_avatar := account.get('media'):
        try:
            with open(user_avatar[-1]['path'], 'rb') as image_file:
                await send_tracked_photo(
                    update,
                    context,
                    caption=user_data,
                    photo=InputFile(image_file),
                    reply_markup=InlineKeyboardMarkup(
                        CHECK_ACCOUNT_DATA_BUTTONS
                    )
                )
        except Exception as error:
            print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä: {str(error)}')
    else:
        await send_tracked_message(
            update,
            context,
            text=user_data,
            reply_markup=InlineKeyboardMarkup(CHECK_ACCOUNT_DATA_BUTTONS)
        )


@clear_messages
async def start_registration(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    context.user_data['account'] = dict()
    await send_tracked_message(
        query,
        context,
        text=ASK_FULL_NAME
    )
    return REGISTRATION_FULL_NAME


@clear_messages
async def select_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    full_name = update.message.text
    await update.message.delete()
    if not await validate_full_name(update, context, full_name):
        return 'full_name'
    name, surname = full_name.split()
    context.user_data['account']['name'] = name
    context.user_data['account']['surname'] = surname
    await send_tracked_message(
        update,
        context,
        text=ASK_EMAIL
    )
    return REGISTRATION_EMAIL


@clear_messages
async def select_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    entered_email = update.message.text.lower()
    await update.message.delete()
    if not await validate_email(update, context, entered_email):
        return 'email'
    context.user_data['account']['email'] = entered_email
    await send_tracked_message(
        update,
        context,
        text=ASK_PASSWORD.format(
            min=PASSWORD_MIN_LENGTH,
            max=PASSWORD_MAX_LENGTH
        )
    )
    return REGISTRATION_PASSWORD


@catch_error(REGISTRATION_ERROR, conv=True)
@clear_messages
async def select_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    entered_password = update.message.text
    await update.message.delete()
    if not await validate_password(update, context, entered_password):
        return 'password'
    context.user_data['account']['password'] = entered_password
    context.user_data['account']['telegram_id'] = update.message.from_user.id
    context.user_data['account']['chat_id'] = str(update.message.chat.id)
    async with aiohttp.ClientSession() as session:
        async with session.post(
            REGISTER_USER, json=context.user_data['account']
        ) as response:
            if response.status == HTTPStatus.CREATED:
                user = await response.json()
                await send_tracked_message(
                    update,
                    context,
                    text=REGISTRATION_SUCCESS
                )
                await send_tracked_message(
                    update,
                    context,
                    text=REGISTRATION_GREETING_TEMPLATE.format(
                        name=user['name'],
                        user_id=user['id']
                    ),
                    reply_markup=InlineKeyboardMarkup(
                        FINISH_REGISTRATION_BUTTONS
                    )
                )
            else:
                detail = await response.json()
                await update.message.reply_text(detail)
    return ConversationHandler.END


@clear_messages
async def get_password_for_authorization(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await send_tracked_message(
        await get_interaction(update),
        context,
        text=ASK_PASSWORD_AUTH
    )
    return AUTH_AUTHORIZATION


@catch_error(AUTHORIZATION_ERROR, conv=True)
@clear_messages
@load_data_for_register_user
async def authorization(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    if not context.user_data.get('account'):
        await send_tracked_message(
            update,
            context,
            text=NO_ACCOUNT_LOADED
        )
        return ConversationHandler.END
    entered_password = update.message.text
    await update.message.delete()
    async with aiohttp.ClientSession() as session:
        if not await check_password(
            update,
            context,
            entered_password,
            context.user_data['account']['hashed_password']
        ):
            return 'authorization'
        request_body = dict(
            grant_type='password',
            username=context.user_data['account']['email'],
            password=entered_password,
            scope=''
        )
        async with session.post(
            GET_JWT_TOKEN, data=request_body
        ) as response:
            data = await response.json()
            context.user_data['account']['jwt_token'] = data['access_token']
        async with session.patch(
            USERS_REFRESH_ME,
            headers=get_headers(context),
            json=dict(
                jwt_token=dict(
                    access_token=context.user_data['account']['jwt_token']
                )
            )
        ) as response:
            if response.status == HTTPStatus.OK:
                await send_tracked_message(
                    update,
                    context,
                    text=AUTH_SUCCESS,
                    reply_markup=InlineKeyboardMarkup(
                        FINISH_AUTHORIZATION_BUTTONS
                    )
                )
                return ConversationHandler.END
            await update.message.reply_text(
                    AUTHORIZATION_SAVE_TOKEN_ERROR
                )
            return ConversationHandler.END
        return ConversationHandler.END


@clear_messages
async def get_password_for_delete_account(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    await send_tracked_message(
        update,
        context,
        text=ASK_PASSWORD_FOR_DELETE
    )
    return DELETE_START_DELETE


@catch_error(DELETE_ACCOUNT_ERROR, conv=True)
@clear_messages
@load_data_for_register_user
async def delete_account(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    entered_password = update.message.text
    await update.message.delete()
    async with aiohttp.ClientSession() as session:
        if not await check_password(
            update, context,
            entered_password,
            context.user_data['account']['hashed_password']
        ):
            return DELETE_START_DELETE
        if not await check_authorization(update, context):
            return ConversationHandler.END
        async with session.delete(
            DELETE_USER_BY_ID.format(
                id=context.user_data['account']['id']
            ),
            headers=get_headers(context)
        ):
            context.user_data.pop('account')
            await send_tracked_message(
                update,
                context,
                text=DELETE_SUCCESS
            )
            return ConversationHandler.END


@clear_messages
async def get_password_for_edit_account(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    context.user_data['edit_account'] = dict()
    await send_tracked_message(
        update,
        context,
        text=START_EDIT_PASSWORD_PROMPT
    )
    return EDIT_CHOOSE_EDIT_FIELD


@catch_error(SELECT_EDIT_FIELD_ERROR, conv=True)
@clear_messages
@load_data_for_register_user
async def choose_edit_field(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    entered_password = update.message.text
    await update.message.delete()
    interaction = await get_interaction(update)
    if not await check_password(
        interaction,
        context,
        entered_password,
        context.user_data['account']['hashed_password']
    ):
        return EDIT_CHOOSE_EDIT_FIELD
    if not await check_authorization(interaction, context):
        return ConversationHandler.END
    await send_tracked_message(
        interaction,
        context,
        text=CHOOSE_EDIT_FIELD_PROMPT,
        reply_markup=InlineKeyboardMarkup(EDIT_BUTTONS)
    )
    return EDIT_START_EDIT_FIELD


@catch_error(START_EDIT_ERROR, conv=True)
@clear_messages
async def start_edit_field(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()
    field = query.data
    if field == EDIT_FULL_NAME_CALLBACK:
        await send_tracked_message(
            query,
            context,
            text=EDIT_FULL_NAME_PROMPT
        )
        return EDIT_SAVE_EDIT_FULL_NAME
    elif field == EDIT_EMAIL_CALLBACK:
        await send_tracked_message(
            query,
            context,
            text=EDIT_EMAIL_PROMPT
        )
        return EDIT_SAVE_EDIT_EMAIL
    elif field == EDIT_PASSWORD:
        await send_tracked_message(
            query,
            context,
            text=EDIT_PASSWORD_PROMPT
        )
        return EDIT_SAVE_EDIT_PASSWORD
    elif field == EDIT_ADD_AVATAR:
        await send_tracked_message(
            query,
            context,
            text=EDIT_AVATAR_PROMPT
        )
        return EDIT_SAVE_AVATAR


@catch_error(SAVE_FULL_NAME_ERROR)
@clear_messages
async def save_edit_full_name(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
):
    full_name = update.message.text
    await update.message.delete()
    if not await validate_full_name(update, context, full_name):
        return EDIT_SAVE_EDIT_FULL_NAME
    name, surname = full_name.split()
    context.user_data['edit_account']['name'] = name
    context.user_data['edit_account']['surname'] = surname
    await send_tracked_message(
        update,
        context,
        text=FULL_NAME_SAVED_MESSAGE,
    )
    await send_tracked_message(
        update,
        context,
        text=CHOOSE_EDIT_FIELD_PROMPT,
        reply_markup=InlineKeyboardMarkup(EDIT_BUTTONS)
    )
    return EDIT_START_EDIT_FIELD


@catch_error(SAVE_EMAIL_ERROR, conv=True)
@clear_messages
async def save_edit_email(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
):
    email = update.message.text
    await update.message.delete()
    if not await validate_email(update, context, email):
        return EDIT_SAVE_EDIT_EMAIL
    context.user_data['edit_account']['email'] = email
    await send_tracked_message(
        update,
        context,
        text=EMAIL_SAVED_MESSAGE
    )
    await send_tracked_message(
        update,
        context,
        text=CHOOSE_EDIT_FIELD_PROMPT,
        reply_markup=InlineKeyboardMarkup(EDIT_BUTTONS)
    )
    return EDIT_START_EDIT_FIELD


@catch_error(SAVE_PASSWORD_ERROR, conv=True)
@clear_messages
async def save_edit_password(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
):
    password = update.message.text
    await update.message.delete()
    if not await validate_password(update, context, password):
        return EDIT_SAVE_EDIT_PASSWORD
    context.user_data['edit_account']['password'] = password
    await send_tracked_message(
        update,
        context,
        text=PASSWORD_SAVED_MESSAGE
    )
    await send_tracked_message(
        update,
        context,
        text=CHOOSE_EDIT_FIELD_PROMPT,
        reply_markup=InlineKeyboardMarkup(EDIT_BUTTONS)
    )
    return EDIT_START_EDIT_FIELD


@catch_error(SAVE_AVATAR_ERROR)
@clear_messages
async def save_avatar(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
):
    if not await validate_empty_photo(update, context):
        return EDIT_SAVE_AVATAR
    photo = update.message.photo[-1]
    await update.message.delete()
    file_id = photo.file_id
    tg_file = await context.bot.get_file(file_id)
    file_data = await tg_file.download_as_bytearray()
    async with aiohttp.ClientSession() as session:
        form = aiohttp.FormData()
        form.add_field(
            name='file',
            value=file_data,
            filename=f'{update.effective_user.id}.jpg',
            content_type='image/jpg'
        )
        async with session.post(
            ADD_NEW_AVATAR,
            data=form,
            headers=get_headers(context)
        ) as response:
            if response.status == HTTPStatus.UNAUTHORIZED:
                await send_tracked_message(
                    update,
                    context,
                    text=TOKEN_EXPIRED_MESSAGE
                )
                return ConversationHandler.END
            if response.status != HTTPStatus.OK:
                error_data = await response.json()
                await send_tracked_message(
                    update,
                    context,
                    text=AVATAR_UPLOAD_ERROR_MESSAGE.format(
                        error=error_data
                    )
                )
                return EDIT_ADD_AVATAR
            photo = await response.json()
    context.user_data['edit_account']['photo_id'] = photo['id']
    await send_tracked_message(
        update,
        context,
        text=AVATAR_SAVED_MESSAGE
    )
    await send_tracked_message(
        update,
        context,
        text=CHOOSE_EDIT_FIELD_PROMPT,
        reply_markup=InlineKeyboardMarkup(EDIT_BUTTONS)
    )
    return EDIT_START_EDIT_FIELD


@catch_error(EDIT_FINISH_ERROR)
@clear_messages
@load_data_for_register_user
async def finish_edit(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()
    async with aiohttp.ClientSession() as session:
        async with session.patch(
            USERS_REFRESH_ME,
            headers=get_headers(context),
            json=context.user_data['edit_account']
        ) as response:
            new_user_data = await response.json()
            await send_tracked_message(
                query,
                context,
                text=DATA_UPDATED_MESSAGE.format(
                    new_user_data=USER_CARD.format(
                        name=new_user_data['name'],
                        surname=new_user_data['surname'],
                        telegram_id=new_user_data['telegram_id'],
                        email=new_user_data['email'],
                        jwt_token=new_user_data['jwt_token']['access_token']
                    )
                ),
                reply_markup=InlineKeyboardMarkup(
                    FINISH_EDIT_BUTTONS
                )
            )
            return ConversationHandler.END


def handlers_installer(
    application: ApplicationBuilder
) -> None:
    application.add_handler(
        CommandHandler('account_settings', account_settings)
    )
    application.add_handler(
        CallbackQueryHandler(
            account_settings, pattern=f'^{ACCOUNT_SETTINGS}$'
        )
    )
    application.add_handler(
        CommandHandler('account_data', check_account_data)
    )
    application.add_handler(
        CommandHandler('load_data', load_account_data)
    )
    registration_conversation_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                start_registration, pattern='^start_registration$'
            )
        ],
        states={
            REGISTRATION_FULL_NAME: [
                MessageHandler(MESSAGE_HANDLERS, select_name)
            ],
            REGISTRATION_EMAIL: [
                MessageHandler(MESSAGE_HANDLERS, select_email)
            ],
            REGISTRATION_PASSWORD: [
                MessageHandler(MESSAGE_HANDLERS, select_password)
            ]
        },
        fallbacks=[
            MessageHandler(MESSAGE_HANDLERS, select_password)
        ]
    )
    authorization_conversation_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                get_password_for_authorization, pattern='^authorization$'
            ),
            CommandHandler(
                'auth', get_password_for_authorization
            )
        ],
        states={
            AUTH_AUTHORIZATION: [
                MessageHandler(MESSAGE_HANDLERS, authorization)
            ],
            AUTH_GET_PASSWORD: [
                MessageHandler(
                    MESSAGE_HANDLERS, get_password_for_authorization
                )
            ]
        },
        fallbacks=[
            MessageHandler(MESSAGE_HANDLERS, authorization)
        ]
    )
    delete_account_conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler(
                'delete_account', get_password_for_delete_account
            )
        ],
        states={
            DELETE_START_DELETE: [
                MessageHandler(MESSAGE_HANDLERS, delete_account)
            ]
        },
        fallbacks=[
            MessageHandler(MESSAGE_HANDLERS, delete_account)
        ]
    )
    edit_account_conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler('edit_account', get_password_for_edit_account)
        ],
        states={
            EDIT_CHOOSE_EDIT_FIELD: [
                MessageHandler(MESSAGE_HANDLERS, choose_edit_field)
            ],
            EDIT_START_EDIT_FIELD: [
                CallbackQueryHandler(start_edit_field, pattern='^edit_')
            ],
            EDIT_SAVE_EDIT_FULL_NAME: [
                MessageHandler(MESSAGE_HANDLERS, save_edit_full_name)
            ],
            EDIT_SAVE_EDIT_EMAIL: [
                MessageHandler(MESSAGE_HANDLERS, save_edit_email)
            ],
            EDIT_SAVE_EDIT_PASSWORD: [
                MessageHandler(MESSAGE_HANDLERS, save_edit_password)
            ],
            EDIT_SAVE_AVATAR: [
                MessageHandler(PHOTO_HANDLERS, save_avatar)
            ],
            EDIT_FINISH_EDIT: [
                CallbackQueryHandler(finish_edit, pattern='^finish_edit$')
            ]
        },
        fallbacks=[
            CallbackQueryHandler(finish_edit, pattern='^finish_edit$')
        ]
    )
    application.add_handler(
        registration_conversation_handler
    )
    application.add_handler(
        authorization_conversation_handler
    )
    application.add_handler(
        delete_account_conversation_handler
    )
    application.add_handler(
        edit_account_conversation_handler
    )
