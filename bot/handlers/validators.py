import re
from decimal import Decimal, InvalidOperation

import aiohttp
from telegram import CallbackQuery, Update
from telegram.ext import ContextTypes

from bot.endpoints import GET_USER_BY_EMAIL
from bot.handlers.utils import get_interaction

VALIDATE_FULL_NAME_PATTERN = r'^[A-Z–ê-–Ø–Åa-z–∞-—è—ë]+ [A-Z–ê-–Ø–Åa-z–∞-—è—ë]+$'
FULL_NAME_PATTERN_ERROR = (
    '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ üö´\n'
    '–í—ã —É–∫–∞–∑–∞–ª–∏ {current}\n'
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
)

EMAIL_PATTERN = r'^[A-Za-z0-9._%+-]+@(mail|gmail|yandex)\.(ru|com)$'
WRONG_EMAIL_PATTERN_ERROR = (
    '–í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—á—Ç—ã {current} '
    '—Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. üö´\n'
    '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–æ—á—Ç—É –µ—â–µ —Ä–∞–∑!'
)
NOT_UNIQUE_EMAIL_ERROR = (
    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {current} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. üö´\n'
    '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤—ã–π'
)

PASSWORD_PATTERN = r'^\d+$'
PASSWORD_MIN_LENGTH = 3
PASSWORD_MAX_LENGTH = 6
WRONG_PASSWORD_LENGTH_ERROR = (
    '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–ª–∏–Ω—É –Ω–µ –º–µ–Ω–µ–µ {min} '
    '–∏ –Ω–µ –±–æ–ª–µ–µ {max}. üö´\n'
    '–í–∞—à–∞ –¥–ª–∏–Ω–∞: {current}.\n'
    '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –µ—â–µ —Ä–∞–∑:'
)
WRONG_PASSWORD_PATTERN_ERROR = (
    '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –æ—Ç 1 –¥–æ 9 üö´'
)

VALIDATE_FULL_NAME_ERROR = '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏.'

PRICE_PATTERN = r'^\d+(\.\d{1,2})?$'
PRICE_PATTERN_ERROR = (
    '–¶–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!\n'
    '–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑!'
)
PRICE_VALUE_ERROR = (
    '–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0!\n'
    '–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑!'
)


async def validate_full_name(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    full_name: str
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏."""
    if not bool(
        re.match(
            VALIDATE_FULL_NAME_PATTERN,
            full_name
        )
    ):
        await update.message.reply_text(
            FULL_NAME_PATTERN_ERROR.format(current=full_name)
        )
        return False
    return True


async def validate_email(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    email: str
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ—á—Ç—ã."""
    if not bool(
        re.match(
            EMAIL_PATTERN,
            email
        )
    ):
        await update.message.reply_text(
            WRONG_EMAIL_PATTERN_ERROR.format(current=email)
        )
        return False
    async with aiohttp.ClientSession() as session:
        async with session.post(
            GET_USER_BY_EMAIL,
            json=dict(email=email)
        ) as response:
            user_data = await response.json()
            if user_data:
                await update.message.reply_text(
                    NOT_UNIQUE_EMAIL_ERROR.format(
                        current=email
                    )
                )
                return False
    return True


async def validate_password(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    password: str
) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è.
    ________________________________
    - –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.
    """
    if not bool(
        re.match(
            PASSWORD_PATTERN,
            password
        )
    ):
        await update.message.reply_text(WRONG_PASSWORD_PATTERN_ERROR)
        return False
    elif not PASSWORD_MIN_LENGTH < len(password) < PASSWORD_MAX_LENGTH:
        await update.message.reply_text(
            WRONG_PASSWORD_LENGTH_ERROR.format(
                min=PASSWORD_MIN_LENGTH,
                max=PASSWORD_MAX_LENGTH,
                current=len(password)
            )
        )
        return False
    return True


async def validate_price(
    interaction: Update | CallbackQuery,
    context: ContextTypes.DEFAULT_TYPE,
    price: str
) -> bool:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —Ü–µ–Ω—ã"""
    str_price = price.strip().replace(',', '.')
    if not re.match(PRICE_PATTERN, str_price):
        await interaction.message.reply_text(
            WRONG_PASSWORD_PATTERN_ERROR
        )
        return False
    elif Decimal(str_price) < 0:
        await interaction.message.reply_text(
            PRICE_VALUE_ERROR
        )
        return False
    return str_price
